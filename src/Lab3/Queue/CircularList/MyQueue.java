package Lab3.Queue.CircularList;

/**
 * Класс реализации очереди на круговом списке
 */
public class MyQueue {
    /**
     * Ссылка на круговой список
     */
    private final MyList list;

    /**
     * Конструктор очереди по умолчанию
     */
    public MyQueue() {
        // Создаем экземпляр списка
        list = new MyList();
    }
    /**
     * Очищает очередь, делая ее пустой
     */
    public void makeNull() {
        //Очищаем список
        list.makeNull();
    }
    /**
     * Возвращает первый элемент (копия) очереди
     * @return первый символ из очереди, или '\0', если очередь пустая
     */
    public char front() {
        return list.first();
    }
    /**
     * Удаляет первый элемент очереди, и возвращает его в качестве результата
     * @return первый символ из очереди, или '\0', если очередь пустая
     */
    public char dequeue() {
        // Если очередь пустая, вернем '\0'
        if(list.empty()) return '\0';
        //Запоминаем символ на первой позиции
        char c = list.first();
        //Удаляем первую позицию списка
        list.removeHead();
        //Возвращаем символ
        return c;
    }
    /**
     * Вставляет элемент x в конец очереди
     * @param c символ для вставки
     */
    public void enqueue(char c) {
        //Добавляем символ в конец списка
        list.add(c);
    }
    /**
     * Возвращает значение true, если очередь пустая, и значение false в противном случае
     * @return true, если очередь пустая
     */
    public boolean empty() {
        // Вызываем проверку списка на пустоту
        return list.empty();
    }
    /**
     * Возвращает значение true, если очередь полная, и значение false в противном случае
     * @return true, если очередь полная
     */
    public boolean full() {
        // Всегда возвращаем false, список не может переполниться, пока есть оперативная память
        return false;
    }
}
