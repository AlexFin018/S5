package Lab1.ArrayPackage;
import Common.InvalidPositionException;

/**
 * Класс реализации списка ListElement в одномерном массиве
 */
public class MyList {

    /**
     *Создается массив, который будет хранить элементы списка типа ListElement
     */
    private ListElement[] array = new ListElement[200];
    //Переменная last хранит количество элементов в списке. Она указывает на индекс
    // после последнего элемента, то есть позицию, куда будет добавлен новый элемент.
    // Изначально last = 0
    private int last; //позиция первого свободного элемента


    /**
     * Метод First возвращает позицию (Position) 1-го элемента в списке (для массива -
     * это позиция с индексом 0)
     * Если список пустой --> возвращает позицию после последнего
     * @return
     */
    public Position first(){
        //Если список пустой --> возвращает позицию после последнегo
        //иначе создастся экземпляр класса Position внутри которого index = 0.
        return new Position(0);

    }

    /**
     * Метод End возвращает позицию после последнего элемента в списке
     * @return
     */
    public Position end(){
        //Поскольку last указывает на позицию, которая идет после
        //последнего добавленного элемента, мы создаем и возвращаем
        // позицию с этим значением.
        return new Position(last);
    }

    /**
     * Метод Next возвращает позицию следующего элемента в списке
     * @param p - текущая позиция в списке
     * @return
     */
    public Position next(Position p){
        ////Проверяет, является ли текущая позиция корректной.
        // Если индекс меньше 0 или больше/равен количеству
        // элементов в списке (last), то выбрасывается исключение
        if(p.index < 0 || p.index >= last) throw  new InvalidPositionException();

        // создает новую позицию с индексом на один больше
        return new Position(p.index + 1);

    }

    /**
     * Возвращает предыдущую перед p позицию в списке.
     * Результат неопределен, если p = 1, p = end или позиции p нет в списке.
     * Выбрасывается исключение InvalidPositionException
     * @param p позиция для определения предыдущей
     * @return предыдущую позицию в списке
     */
    public Position previous(Position p){
        //Если текущая позиция p — это первая (то есть индекс равен 0),
        // выбрасывается исключение. Если это не первая позиция,
        // создается новая позиция с индексом, уменьшенным на 1.
        if(p.index <= 0 || p.index >= last) throw  new InvalidPositionException();
        return new Position(p.index - 1);
    }


    /**
     * Метод Retrieve возвращает элемент списка по позиции
     * @param p
     * @return
     */
    public ListElement retrieve(Position p){
        //Проверяет, является ли текущая позиция корректной.
        // Если индекс меньше 0 или больше/равен количеству
        // элементов в списке (last), то выбрасывается исключение
        if(p.index < 0 || p.index >= last) throw  new InvalidPositionException();
        //возвращается элемент массива с индексом p.index.
        return array[p.index];
    }

    /**
     * Метод Delete удаляет элемент из позиции списка
     * @param p Позиция удаляемого элемента
     */
    public void delete(Position p){
        //Проверяет, является ли текущая позиция корректной.
        // Если индекс меньше 0 или больше/равен количеству
        // элементов в списке (last), то выбрасывается исключение
        if(p.index < 0 || p.index >= last) throw  new InvalidPositionException();

        //в цикле все элементы, которые идут после удаляемого, сдвигаются на одну
        // позицию влево.
        //Внутри цикла значение на индексе i = значение на индексе i + 1.
        // Этот процесс продолжается до предпоследнего элемента (индекс last - 1), поскольку
        // после сдвига последний элемент будет пустым.
        // Затем уменьшается количество элементов last--
        for(int i = p.index; i < last-1; i++){
            array[i] = array[i+1];
        }
        last--;
    }

    /**
     * Делает список пустым и возвращает позицию после последнего
     * @return
     */
    public Position makeNull(){
        //Очищает список, устанавливая количество элементов равным 0,
        // и возвращает позицию после последнего элемента.

        //Для ускорения освобождения памяти обнуляем ссылки на элементы в массиве
        for(int i = 0; i < last; i++) array[i] = null;

        last = 0;
        return new Position(last);
    }

    /**
     * Возвращает позицию в списке объекта x. Если объекта в списке нет, то возвращается позиция end().
     * Если несколько значений, совпадает со значением x, то возвращается первая позиция от начала.
     * @param x объект, позицию которого нужно найти
     * @return найденная позиция
     */
    public Position locate(ListElement x){
        //Ищет элемент x в списке. Проходит по всем элементам массива, и если находит
        // элемент, равный x, возвращает позицию этого элемента. Если элемент не найден,
        // возвращается позиция после последнего
        for(int i = 0; i < last; i++){
            if(array[i].equals(x)) return new Position(i);
        }
        return new Position(last);
    }

    /**
     * Вставляет элемент x в позицию p.
     * @param x элемент, который нужно вставить
     * @param p позиция, на которую нужно вставить
     */
    public void insert(ListElement x, Position p ){
        //Если индекс позиции некорректный (меньше 0 или больше количества элементов),
        // выбрасывается исключение.
        if(p.index < 0 || p.index > last) throw  new InvalidPositionException();

        // Цикл for начинается с конца списка (last) и продолжается до индекса, указанного в позиции p.index.
        // каждый элемент перемещется на одну позицию вправо array[i] = array[i-1],
        // до тех пор, пока не дойдёт до позиции p.index, на эту позицию вставляется новый элемент
        //После освобождения места, в индекс p.index записывается индекс нового элемент x
        for(int i = last; i > p.index; i--) array[i] = array[i-1];

        array[p.index] = new ListElement(x);
        last++;
    }

    /**
     * Вывод списка на печать в порядке расположения элементов в списке
     */
    public void printList(){
        //Выводит список на экран. Проходит по всем элементам массива от 0 до last
        // вызывается метод PrintElement для вывода строки элемента
        for(int i = 0; i < last; i++){
            array[i].PrintElement();
            System.out.println();
        }
    }

}
